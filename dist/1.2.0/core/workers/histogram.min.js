/*! Dotplot_wgl 1.2.0 2015-01-30 */
/*
 *  dotplot_wgl: Dot-Plot implementation in JavaScript and WebGL..
 *  Copyright (C) 2014  Jean-Christophe Taveau.
 *
 *  This file is part of dotplot_wgl.
 *
 *  dotplot_wgl is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  dotplot_wgl is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with dotplot_wgl.  If not, see <http://www.gnu.org/licenses/>
 *
 * Authors:
 * Rania Assab
 * Aurélien Luciani
 * Quentin Riché-Piotaix
 * Mathieu Schaeffer
 */
"use strict";var maxCount={RGB:null,RG:null,GB:null,RB:null,R:null,G:null,B:null},maxLog={RGB:null,RG:null,GB:null,RB:null,R:null,G:null,B:null},histCount={RGB:new Uint32Array(256),RG:new Uint32Array(256),GB:new Uint32Array(256),RB:new Uint32Array(256),R:new Uint32Array(256),G:new Uint32Array(256),B:new Uint32Array(256)},histLog={RGB:new Uint8Array(256),RG:new Uint8Array(256),GB:new Uint8Array(256),RB:new Uint8Array(256),R:new Uint8Array(256),G:new Uint8Array(256),B:new Uint8Array(256)};self.addEventListener("message",function(a){for(var b=a.data.pixels,c=0;c<b.length;c+=4)histCount.R[b[c]]++,histCount.G[b[c+1]]++,histCount.B[b[c+2]]++;for(var c=0;256>c;c++)histCount.RG[c]=histCount.R[c]+histCount.G[c],histCount.GB[c]=histCount.G[c]+histCount.B[c],histCount.RB[c]=histCount.R[c]+histCount.B[c],histCount.RGB[c]=histCount.RG[c]+histCount.B[c],histLog.R[c]=Math.log(histCount.R[c]),histLog.G[c]=Math.log(histCount.G[c]),histLog.B[c]=Math.log(histCount.B[c]),histLog.RG[c]=Math.log(histCount.RG[c]),histLog.GB[c]=Math.log(histCount.GB[c]),histLog.RB[c]=Math.log(histCount.RB[c]),histLog.RGB[c]=Math.log(histCount.RGB[c]),maxCount.RGB=Math.max(maxCount.RGB,histCount.RGB[c]),maxCount.RG=Math.max(maxCount.RG,histCount.RG[c]),maxCount.GB=Math.max(maxCount.GB,histCount.GB[c]),maxCount.RB=Math.max(maxCount.RB,histCount.RB[c]),maxCount.R=Math.max(maxCount.R,histCount.R[c]),maxCount.G=Math.max(maxCount.G,histCount.G[c]),maxCount.B=Math.max(maxCount.B,histCount.B[c]),maxLog.RGB=Math.max(maxLog.RGB,histLog.RGB[c]),maxLog.RG=Math.max(maxLog.RG,histLog.RG[c]),maxLog.GB=Math.max(maxLog.GB,histLog.GB[c]),maxLog.RB=Math.max(maxLog.RB,histLog.RB[c]),maxLog.R=Math.max(maxLog.R,histLog.R[c]),maxLog.G=Math.max(maxLog.G,histLog.G[c]),maxLog.B=Math.max(maxLog.B,histLog.B[c]);a.data.transf?self.postMessage({maxCount:maxCount,maxLog:maxLog,histCount:histCount,histLog:histLog},[histCount.RGB.buffer,histCount.RG.buffer,histCount.GB.buffer,histCount.RB.buffer,histCount.R.buffer,histCount.G.buffer,histCount.B.buffer,histLog.RGB.buffer,histLog.RG.buffer,histLog.GB.buffer,histLog.RB.buffer,histLog.R.buffer,histLog.G.buffer,histLog.B.buffer]):self.postMessage({maxCount:maxCount,maxLog:maxLog,histCount:histCount,histLog:histLog}),self.close()},!1);