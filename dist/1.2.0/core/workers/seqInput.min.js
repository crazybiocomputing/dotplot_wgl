/*! Dotplot_wgl 1.2.0 2015-01-30 */
/*
 *  dotplot_wgl: Dot-Plot implementation in JavaScript and WebGL..
 *  Copyright (C) 2014  Jean-Christophe Taveau.
 *
 *  This file is part of dotplot_wgl.
 *
 *  dotplot_wgl is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  dotplot_wgl is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with dotplot_wgl.  If not, see <http://www.gnu.org/licenses/>
 *
 * Authors:
 * Rania Assab
 * Aurélien Luciani
 * Quentin Riché-Piotaix
 * Mathieu Schaeffer
 */
"use strict";var norm=function(a,b,c){this[a]=Math.round(255*b/c.length+127.5/c.length)},normProt={},normDNA={};["A","R","N","D","C","Q","E","G","H","I","L","K","M","F","P","S","T","W","Y","V","B","Z","X","*"].forEach(norm,normProt),["A","T","G","C","S","W","R","Y","K","M","B","V","H","D","N","U"].forEach(norm,normDNA);var code={AAA:"K",AAC:"N",AAU:"N",AAG:"K",ACA:"T",ACC:"T",ACU:"T",ACG:"T",AUA:"I",AUC:"I",AUU:"I",AUG:"M",AGA:"R",AGC:"S",AGU:"S",AGG:"R",CAA:"Q",CAC:"H",CAU:"H",CAG:"Q",CCA:"P",CCC:"P",CCU:"P",CCG:"P",CUA:"L",CUC:"L",CUU:"L",CUG:"L",CGA:"R",CGC:"R",CGU:"R",CGG:"R",UAA:"*",UAC:"Y",UAU:"Y",UAG:"O",UCA:"S",UCC:"S",UCU:"S",UCG:"S",UUA:"L",UUC:"F",UUU:"F",UUG:"L",UGA:"U",UGC:"C",UGU:"C",UGG:"W",GAA:"E",GAC:"D",GAU:"D",GAG:"E",GCA:"A",GCC:"A",GCU:"A",GCG:"A",GUA:"V",GUC:"V",GUU:"V",GUG:"V",GGA:"G",GGC:"G",GGU:"G",GGG:"G",GCN:"A",GCR:"A",GCY:"A",GCK:"A",GCM:"A",GCS:"A",GCW:"A",GCB:"A",GCD:"A",GCH:"A",GCV:"A",RAY:"B",UGY:"C",GAY:"D",GAR:"E",UUY:"F",GGN:"G",GGR:"G",GGY:"G",GGK:"G",GGM:"G",GGS:"G",GGW:"G",GGB:"G",GGD:"G",GGH:"G",GGV:"G",CAY:"H",AUH:"I",AUY:"I",AUM:"I",AUW:"I",AAR:"K",UUR:"L",CUN:"L",CUR:"L",CUY:"L",CUK:"L",CUM:"L",CUS:"L",CUW:"L",CUB:"L",CUD:"L",CUH:"L",CUV:"L",YUR:"L",AAY:"N",CCN:"P",CCR:"P",CCY:"P",CCK:"P",CCM:"P",CCS:"P",CCW:"P",CCB:"P",CCD:"P",CCH:"P",CCV:"P",CAR:"U",CGN:"R",CGR:"R",CGY:"R",CGK:"R",CGM:"R",CGS:"R",CGW:"R",CGB:"R",CGD:"R",CGH:"R",CGV:"R",AGR:"R",MGR:"R",UCN:"S",UCR:"S",UCY:"S",UCK:"S",UCM:"S",UCS:"S",UCW:"S",UCB:"S",UCD:"S",UCH:"S",UCV:"S",AGY:"S",ACN:"T",ACR:"T",ACY:"T",ACK:"T",ACM:"T",ACS:"T",ACW:"T",ACB:"T",ACD:"T",ACH:"T",ACV:"T",GUN:"V",GUR:"V",GUY:"V",GUK:"V",GUM:"V",GUS:"V",GUW:"V",GUB:"V",GUD:"V",GUH:"V",GUV:"V",UAY:"Y",SAR:"Z",UAR:"*",URA:"*"},geneticCode=function(a){return a.replace(/T/g,"U")in code?code[a.replace(/T/g,"U")]:"X"},comp={A:"T",T:"A",U:"A",C:"G",G:"C",K:"M",M:"K",R:"Y",Y:"R",S:"S",W:"W",B:"V",V:"B",H:"D",D:"H",N:"N"},transf,sequenceParser=function(a,b){var c=a.match(/(^[>;][\s\S]*?)\n(?![>;])/);c=c?c[0]:"";var d=a.replace(/^\s*[>;][^\n]*$/gm,"").replace(/[\s\d]?/g,"");if("unknown"===this.type&&(this.type=/[EFILOPQZ\*]/i.test(d)?"proteic":"unknown"),"unknown"===this.type&&(/(protei[cn])|(amino)|([\d ]aas?\W)/i.test(c)?this.type="proteic":/(nucleic)|([DR]NA)|([\d ]bps?\W)/i.test(c)&&(this.type="nucleic")),"unknown"===this.type)self.postMessage({status:"error",message:"Could not determine type, try specifying one before loading the sequence"});else{if("undefined"==typeof this.names[b])try{if(this.names[b]=c.match(/[^|]*$/)[0].trim().substr(0,25),!this.names[b])throw"no name found"}catch(e){this.names[b]=(new Date).toLocaleString()+" "+this.type+" sequence "+(b+1)}if("nucleic"===this.type){for(var f=d.toUpperCase().replace(/[^ATGCSWRYKMBVHDNU]/g,"N"),g="",h=0;h<f.length-2;h++)g+=geneticCode(f.charAt(h)+f.charAt(h+1)+f.charAt(h+2));g+="XX";var i="";for(h=f.length;h;h--)i+=f.charAt(h-1);var j="";for(h=0;h<f.length;h++)j+=comp[f.charAt(h)];var k="";for(h=0;h<f.length;h++)k+=f.charAt(h)+i.charAt(h)+j.charAt(h);var l=["","",""];for(h=0;h<g.length;h++)l[h%3]+=g.charAt(h);if(transf){var m=stringToTypedArray(k,normDNA),n=stringToTypedArray(g,normProt);self.postMessage({nucleic:m,nucleicS:[f,i,j],proteic:n,proteicS:l,name:this.names[b],type:this.type,comment:c,status:"sequence",size:f.length},[m.buffer,n.buffer])}else self.postMessage({nucleic:stringToTypedArray(k,normDNA),nucleicS:[f,i,j],proteic:stringToTypedArray(g,normProt),proteicS:l,name:this.names[b],type:this.type,comment:c,status:"sequence",size:f.length})}else{var f=d.toUpperCase().replace(/[^ARNDCQEGHILKMFPSTWYVBZX\*]/g,"X");if(transf)self.postMessage({proteic:stringToTypedArray(f,normProt),proteicS:f,name:this.names[b],type:this.type,comment:c,status:"sequence",size:f.length});else{var n=stringToTypedArray(f,normProt);self.postMessage({proteic:n,proteicS:f,name:this.names[b],type:this.type,comment:c,status:"sequence",size:f.length},[n.buffer])}}}},stringToTypedArray=function(a,b){for(var c=new Uint8Array(a.length),d=0;d<a.length;d++)c[d]=b[a.charAt(d)];return c},sequenceSeparator=function(a,b,c){a.match(/([>;][^\n]*\n)*[^>;]*/g).filter(function(a){return a}).forEach(sequenceParser,{names:b,type:c}),self.postMessage({status:"done"}),self.close()},sequenceLoader=function(a,b,c,d){var e=function(a,b,c,d){var e=new XMLHttpRequest;e.open("GET",a,!0),e.responseType="blob",e.addEventListener("load",function(){200===this.status?/^\nNothing has been found\n$/g.test(this.response)?(self.postMessage({status:"error"}),self.close()):d(new Blob([this.response]),b,c):/^4/.test(this.status)&&(self.postMessage({status:"error",message:"could not load file"}),self.close())},!1),e.send()};switch(b){case"NCBI":e("//eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&rettype=fasta&retmode=text&id="+a,c,d,fileToString);break;case"UniProt":e("//www.uniprot.org/uniprot/"+a.toUpperCase()+".fasta",c,"proteic",fileToString)}},fileToString=function(a,b,c){var d=new FileReaderSync;sequenceSeparator(d.readAsText(a),b,c)};self.addEventListener("message",function(a){transf=a.data.transf;var b=a.data.proposedNames.split(/\s*,\s*/).filter(function(a){return a});if("string"!=typeof a.data.rawInput){var c=a.data.type;"unknown"===c&&(a.data.rawInput.name.match(/\.(fna|ffn|frn)$/i)?c="nucleic":a.data.rawInput.name.match(/\.faa$/i)&&(c="proteic")),b.push(a.data.rawInput.name.replace(/\.[^\.]*$/,"")),fileToString(a.data.rawInput,b,a.data.type)}else a.data.rawInput.match(/^\d*$/)?sequenceLoader(a.data.rawInput,"NCBI",b,a.data.type):a.data.rawInput.match(/^([A-NR-Z][\d][A-Z]|[OPQ][\d][A-Z\d])[A-Z\d]{2}[\d]$/i)?sequenceLoader(a.data.rawInput,"UniProt",b,a.data.type):sequenceSeparator(a.data.rawInput,b,a.data.type)},!1);